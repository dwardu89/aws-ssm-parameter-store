"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const property_provider_1 = require("@aws-sdk/property-provider");
const configLoader_1 = require("./configLoader");
const fromEnv_1 = require("./fromEnv");
const fromSharedConfigFiles_1 = require("./fromSharedConfigFiles");
jest.mock("./fromEnv");
jest.mock("./fromSharedConfigFiles");
jest.mock("@aws-sdk/property-provider");
describe("loadConfig", () => {
    const configuration = {
        profile: "profile",
    };
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("passes fromEnv(), fromSharedConfigFiles() and fromStatic() to chain", () => {
        const mockFromEnvReturn = "mockFromEnvReturn";
        fromEnv_1.fromEnv.mockReturnValueOnce(mockFromEnvReturn);
        const mockFromSharedConfigFilesReturn = "mockFromSharedConfigFilesReturn";
        fromSharedConfigFiles_1.fromSharedConfigFiles.mockReturnValueOnce(mockFromSharedConfigFilesReturn);
        const mockFromStatic = "mockFromStatic";
        property_provider_1.fromStatic.mockReturnValueOnce(mockFromStatic);
        const envVarSelector = (env) => env["AWS_CONFIG_FOO"];
        const configKey = (profile) => profile["aws_config_foo"];
        const defaultValue = "foo-value";
        configLoader_1.loadConfig({
            environmentVariableSelector: envVarSelector,
            configFileSelector: configKey,
            default: defaultValue,
        }, configuration);
        expect(fromEnv_1.fromEnv).toHaveBeenCalledTimes(1);
        expect(fromEnv_1.fromEnv).toHaveBeenCalledWith(envVarSelector);
        expect(fromSharedConfigFiles_1.fromSharedConfigFiles).toHaveBeenCalledTimes(1);
        expect(fromSharedConfigFiles_1.fromSharedConfigFiles).toHaveBeenCalledWith(configKey, configuration);
        expect(property_provider_1.fromStatic).toHaveBeenCalledTimes(1);
        expect(property_provider_1.fromStatic).toHaveBeenCalledWith(defaultValue);
        expect(property_provider_1.chain).toHaveBeenCalledTimes(1);
        expect(property_provider_1.chain).toHaveBeenCalledWith(mockFromEnvReturn, mockFromSharedConfigFilesReturn, mockFromStatic);
    });
    it("passes output of chain to memoize", () => {
        const mockChainReturn = "mockChainReturn";
        property_provider_1.chain.mockReturnValueOnce(mockChainReturn);
        configLoader_1.loadConfig({});
        expect(property_provider_1.chain).toHaveBeenCalledTimes(1);
        expect(property_provider_1.memoize).toHaveBeenCalledTimes(1);
        expect(property_provider_1.memoize).toHaveBeenCalledWith(mockChainReturn);
    });
    it("returns output memoize", () => {
        const mockMemoizeReturn = "mockMemoizeReturn";
        property_provider_1.memoize.mockReturnValueOnce(mockMemoizeReturn);
        expect(configLoader_1.loadConfig({})).toEqual(mockMemoizeReturn);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnTG9hZGVyLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29uZmlnTG9hZGVyLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrRUFBd0U7QUFHeEUsaURBQTRDO0FBQzVDLHVDQUFvQztBQUNwQyxtRUFBa0Y7QUFFbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLENBQUM7QUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXhDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsR0FBRyxFQUFFO0lBQzFCLE1BQU0sYUFBYSxHQUFxQjtRQUN0QyxPQUFPLEVBQUUsU0FBUztLQUNuQixDQUFDO0lBRUYsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxHQUFHLEVBQUU7UUFDN0UsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztRQUM3QyxpQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlELE1BQU0sK0JBQStCLEdBQUcsaUNBQWlDLENBQUM7UUFDekUsNkNBQW1DLENBQUMsbUJBQW1CLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUMxRixNQUFNLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQztRQUN2Qyw4QkFBd0IsQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUM5RCxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQXNCLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sU0FBUyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbEUsTUFBTSxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2pDLHlCQUFVLENBQ1I7WUFDRSwyQkFBMkIsRUFBRSxjQUFjO1lBQzNDLGtCQUFrQixFQUFFLFNBQVM7WUFDN0IsT0FBTyxFQUFFLFlBQVk7U0FDdEIsRUFDRCxhQUFhLENBQ2QsQ0FBQztRQUNGLE1BQU0sQ0FBQyxpQkFBTyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLGlCQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNyRCxNQUFNLENBQUMsNkNBQXFCLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2RCxNQUFNLENBQUMsNkNBQXFCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDN0UsTUFBTSxDQUFDLDhCQUFVLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsOEJBQVUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyx5QkFBSyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsTUFBTSxDQUFDLHlCQUFLLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsRUFBRSwrQkFBK0IsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN6RyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxHQUFHLEVBQUU7UUFDM0MsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7UUFDekMseUJBQW1CLENBQUMsbUJBQW1CLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUQseUJBQVUsQ0FBQyxFQUFTLENBQUMsQ0FBQztRQUN0QixNQUFNLENBQUMseUJBQUssQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQywyQkFBTyxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsTUFBTSxDQUFDLDJCQUFPLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN4RCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7UUFDaEMsTUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztRQUM3QywyQkFBcUIsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQzlELE1BQU0sQ0FBQyx5QkFBVSxDQUFDLEVBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNoYWluLCBmcm9tU3RhdGljLCBtZW1vaXplIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBQcm9maWxlIH0gZnJvbSBcIkBhd3Mtc2RrL3NoYXJlZC1pbmktZmlsZS1sb2FkZXIvc3JjXCI7XG5cbmltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tIFwiLi9jb25maWdMb2FkZXJcIjtcbmltcG9ydCB7IGZyb21FbnYgfSBmcm9tIFwiLi9mcm9tRW52XCI7XG5pbXBvcnQgeyBmcm9tU2hhcmVkQ29uZmlnRmlsZXMsIFNoYXJlZENvbmZpZ0luaXQgfSBmcm9tIFwiLi9mcm9tU2hhcmVkQ29uZmlnRmlsZXNcIjtcblxuamVzdC5tb2NrKFwiLi9mcm9tRW52XCIpO1xuamVzdC5tb2NrKFwiLi9mcm9tU2hhcmVkQ29uZmlnRmlsZXNcIik7XG5qZXN0Lm1vY2soXCJAYXdzLXNkay9wcm9wZXJ0eS1wcm92aWRlclwiKTtcblxuZGVzY3JpYmUoXCJsb2FkQ29uZmlnXCIsICgpID0+IHtcbiAgY29uc3QgY29uZmlndXJhdGlvbjogU2hhcmVkQ29uZmlnSW5pdCA9IHtcbiAgICBwcm9maWxlOiBcInByb2ZpbGVcIixcbiAgfTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBpdChcInBhc3NlcyBmcm9tRW52KCksIGZyb21TaGFyZWRDb25maWdGaWxlcygpIGFuZCBmcm9tU3RhdGljKCkgdG8gY2hhaW5cIiwgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tGcm9tRW52UmV0dXJuID0gXCJtb2NrRnJvbUVudlJldHVyblwiO1xuICAgIChmcm9tRW52IGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlT25jZShtb2NrRnJvbUVudlJldHVybik7XG4gICAgY29uc3QgbW9ja0Zyb21TaGFyZWRDb25maWdGaWxlc1JldHVybiA9IFwibW9ja0Zyb21TaGFyZWRDb25maWdGaWxlc1JldHVyblwiO1xuICAgIChmcm9tU2hhcmVkQ29uZmlnRmlsZXMgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tGcm9tU2hhcmVkQ29uZmlnRmlsZXNSZXR1cm4pO1xuICAgIGNvbnN0IG1vY2tGcm9tU3RhdGljID0gXCJtb2NrRnJvbVN0YXRpY1wiO1xuICAgIChmcm9tU3RhdGljIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlT25jZShtb2NrRnJvbVN0YXRpYyk7XG4gICAgY29uc3QgZW52VmFyU2VsZWN0b3IgPSAoZW52OiBOb2RlSlMuUHJvY2Vzc0VudikgPT4gZW52W1wiQVdTX0NPTkZJR19GT09cIl07XG4gICAgY29uc3QgY29uZmlnS2V5ID0gKHByb2ZpbGU6IFByb2ZpbGUpID0+IHByb2ZpbGVbXCJhd3NfY29uZmlnX2Zvb1wiXTtcbiAgICBjb25zdCBkZWZhdWx0VmFsdWUgPSBcImZvby12YWx1ZVwiO1xuICAgIGxvYWRDb25maWcoXG4gICAgICB7XG4gICAgICAgIGVudmlyb25tZW50VmFyaWFibGVTZWxlY3RvcjogZW52VmFyU2VsZWN0b3IsXG4gICAgICAgIGNvbmZpZ0ZpbGVTZWxlY3RvcjogY29uZmlnS2V5LFxuICAgICAgICBkZWZhdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgICB9LFxuICAgICAgY29uZmlndXJhdGlvblxuICAgICk7XG4gICAgZXhwZWN0KGZyb21FbnYpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QoZnJvbUVudikudG9IYXZlQmVlbkNhbGxlZFdpdGgoZW52VmFyU2VsZWN0b3IpO1xuICAgIGV4cGVjdChmcm9tU2hhcmVkQ29uZmlnRmlsZXMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICBleHBlY3QoZnJvbVNoYXJlZENvbmZpZ0ZpbGVzKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChjb25maWdLZXksIGNvbmZpZ3VyYXRpb24pO1xuICAgIGV4cGVjdChmcm9tU3RhdGljKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KGZyb21TdGF0aWMpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKGRlZmF1bHRWYWx1ZSk7XG4gICAgZXhwZWN0KGNoYWluKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KGNoYWluKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChtb2NrRnJvbUVudlJldHVybiwgbW9ja0Zyb21TaGFyZWRDb25maWdGaWxlc1JldHVybiwgbW9ja0Zyb21TdGF0aWMpO1xuICB9KTtcblxuICBpdChcInBhc3NlcyBvdXRwdXQgb2YgY2hhaW4gdG8gbWVtb2l6ZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0NoYWluUmV0dXJuID0gXCJtb2NrQ2hhaW5SZXR1cm5cIjtcbiAgICAoY2hhaW4gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tDaGFpblJldHVybik7XG4gICAgbG9hZENvbmZpZyh7fSBhcyBhbnkpO1xuICAgIGV4cGVjdChjaGFpbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIGV4cGVjdChtZW1vaXplKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgZXhwZWN0KG1lbW9pemUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKG1vY2tDaGFpblJldHVybik7XG4gIH0pO1xuXG4gIGl0KFwicmV0dXJucyBvdXRwdXQgbWVtb2l6ZVwiLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja01lbW9pemVSZXR1cm4gPSBcIm1vY2tNZW1vaXplUmV0dXJuXCI7XG4gICAgKG1lbW9pemUgYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWVPbmNlKG1vY2tNZW1vaXplUmV0dXJuKTtcbiAgICBleHBlY3QobG9hZENvbmZpZyh7fSBhcyBhbnkpKS50b0VxdWFsKG1vY2tNZW1vaXplUmV0dXJuKTtcbiAgfSk7XG59KTtcbiJdfQ==