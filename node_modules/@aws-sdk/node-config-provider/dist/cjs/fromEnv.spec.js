"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const property_provider_1 = require("@aws-sdk/property-provider");
const fromEnv_1 = require("./fromEnv");
describe("fromEnv", () => {
    describe("with env var getter", () => {
        const envVarName = "ENV_VAR_NAME";
        const envVarGetter = (env) => env[envVarName];
        const envVarValue = process.env[envVarName];
        const mockEnvVarValue = "mockEnvVarValue";
        const getProviderError = (getter) => new property_provider_1.ProviderError(`Cannot load config from environment variables with getter: ${getter}`);
        beforeEach(() => {
            delete process.env[envVarName];
        });
        afterAll(() => {
            process.env[envVarName] = envVarValue;
        });
        it(`returns string value in '${envVarName}' env var when set`, () => {
            process.env[envVarName] = mockEnvVarValue;
            return expect(fromEnv_1.fromEnv(envVarGetter)()).resolves.toBe(mockEnvVarValue);
        });
        it("return complex value from the getter", () => {
            const value = { Foo: "bar" };
            const getter = jest.fn().mockReturnValue(value);
            // Validate the generic type works
            return expect(fromEnv_1.fromEnv(getter)()).resolves.toEqual(value);
        });
        it(`throws when '${envVarName}' env var is not set`, () => {
            expect.assertions(1);
            return expect(fromEnv_1.fromEnv(envVarGetter)()).rejects.toMatchObject(getProviderError(envVarGetter));
        });
        it("throws when the getter function throws", () => {
            const exception = new Error("Exception when getting the config");
            const getter = jest.fn().mockRejectedValue(exception);
            return expect(fromEnv_1.fromEnv(getter)()).rejects.toEqual(exception);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUVudi5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21FbnYuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtFQUEyRDtBQUUzRCx1Q0FBbUQ7QUFFbkQsUUFBUSxDQUFDLFNBQVMsRUFBRSxHQUFHLEVBQUU7SUFDdkIsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxNQUFNLFVBQVUsR0FBRyxjQUFjLENBQUM7UUFDbEMsTUFBTSxZQUFZLEdBQTBCLENBQUMsR0FBc0IsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBRSxDQUFDO1FBQ3pGLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsTUFBTSxlQUFlLEdBQUcsaUJBQWlCLENBQUM7UUFFMUMsTUFBTSxnQkFBZ0IsR0FBRyxDQUFDLE1BQTZCLEVBQUUsRUFBRSxDQUN6RCxJQUFJLGlDQUFhLENBQUMsOERBQThELE1BQU0sRUFBRSxDQUFDLENBQUM7UUFFNUYsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFdBQVcsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyw0QkFBNEIsVUFBVSxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7WUFDbEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxlQUFlLENBQUM7WUFDMUMsT0FBTyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN4RSxDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7WUFFOUMsTUFBTSxLQUFLLEdBQVUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDcEMsTUFBTSxNQUFNLEdBQXdCLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckUsa0NBQWtDO1lBQ2xDLE9BQU8sTUFBTSxDQUFDLGlCQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsZ0JBQWdCLFVBQVUsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO1lBQ3hELE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckIsT0FBTyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQy9GLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHdDQUF3QyxFQUFFLEdBQUcsRUFBRTtZQUNoRCxNQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekUsT0FBTyxNQUFNLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlckVycm9yIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3BlcnR5LXByb3ZpZGVyXCI7XG5cbmltcG9ydCB7IGZyb21FbnYsIEdldHRlckZyb21FbnYgfSBmcm9tIFwiLi9mcm9tRW52XCI7XG5cbmRlc2NyaWJlKFwiZnJvbUVudlwiLCAoKSA9PiB7XG4gIGRlc2NyaWJlKFwid2l0aCBlbnYgdmFyIGdldHRlclwiLCAoKSA9PiB7XG4gICAgY29uc3QgZW52VmFyTmFtZSA9IFwiRU5WX1ZBUl9OQU1FXCI7XG4gICAgY29uc3QgZW52VmFyR2V0dGVyOiBHZXR0ZXJGcm9tRW52PHN0cmluZz4gPSAoZW52OiBOb2RlSlMuUHJvY2Vzc0VudikgPT4gZW52W2VudlZhck5hbWVdITtcbiAgICBjb25zdCBlbnZWYXJWYWx1ZSA9IHByb2Nlc3MuZW52W2VudlZhck5hbWVdO1xuICAgIGNvbnN0IG1vY2tFbnZWYXJWYWx1ZSA9IFwibW9ja0VudlZhclZhbHVlXCI7XG5cbiAgICBjb25zdCBnZXRQcm92aWRlckVycm9yID0gKGdldHRlcjogR2V0dGVyRnJvbUVudjxzdHJpbmc+KSA9PlxuICAgICAgbmV3IFByb3ZpZGVyRXJyb3IoYENhbm5vdCBsb2FkIGNvbmZpZyBmcm9tIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aXRoIGdldHRlcjogJHtnZXR0ZXJ9YCk7XG5cbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGRlbGV0ZSBwcm9jZXNzLmVudltlbnZWYXJOYW1lXTtcbiAgICB9KTtcblxuICAgIGFmdGVyQWxsKCgpID0+IHtcbiAgICAgIHByb2Nlc3MuZW52W2VudlZhck5hbWVdID0gZW52VmFyVmFsdWU7XG4gICAgfSk7XG5cbiAgICBpdChgcmV0dXJucyBzdHJpbmcgdmFsdWUgaW4gJyR7ZW52VmFyTmFtZX0nIGVudiB2YXIgd2hlbiBzZXRgLCAoKSA9PiB7XG4gICAgICBwcm9jZXNzLmVudltlbnZWYXJOYW1lXSA9IG1vY2tFbnZWYXJWYWx1ZTtcbiAgICAgIHJldHVybiBleHBlY3QoZnJvbUVudihlbnZWYXJHZXR0ZXIpKCkpLnJlc29sdmVzLnRvQmUobW9ja0VudlZhclZhbHVlKTtcbiAgICB9KTtcblxuICAgIGl0KFwicmV0dXJuIGNvbXBsZXggdmFsdWUgZnJvbSB0aGUgZ2V0dGVyXCIsICgpID0+IHtcbiAgICAgIHR5cGUgVmFsdWUgPSB7IEZvbzogc3RyaW5nIH07XG4gICAgICBjb25zdCB2YWx1ZTogVmFsdWUgPSB7IEZvbzogXCJiYXJcIiB9O1xuICAgICAgY29uc3QgZ2V0dGVyOiAoZW52OiBhbnkpID0+IFZhbHVlID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh2YWx1ZSk7XG4gICAgICAvLyBWYWxpZGF0ZSB0aGUgZ2VuZXJpYyB0eXBlIHdvcmtzXG4gICAgICByZXR1cm4gZXhwZWN0KGZyb21FbnYoZ2V0dGVyKSgpKS5yZXNvbHZlcy50b0VxdWFsKHZhbHVlKTtcbiAgICB9KTtcblxuICAgIGl0KGB0aHJvd3Mgd2hlbiAnJHtlbnZWYXJOYW1lfScgZW52IHZhciBpcyBub3Qgc2V0YCwgKCkgPT4ge1xuICAgICAgZXhwZWN0LmFzc2VydGlvbnMoMSk7XG4gICAgICByZXR1cm4gZXhwZWN0KGZyb21FbnYoZW52VmFyR2V0dGVyKSgpKS5yZWplY3RzLnRvTWF0Y2hPYmplY3QoZ2V0UHJvdmlkZXJFcnJvcihlbnZWYXJHZXR0ZXIpKTtcbiAgICB9KTtcblxuICAgIGl0KFwidGhyb3dzIHdoZW4gdGhlIGdldHRlciBmdW5jdGlvbiB0aHJvd3NcIiwgKCkgPT4ge1xuICAgICAgY29uc3QgZXhjZXB0aW9uID0gbmV3IEVycm9yKFwiRXhjZXB0aW9uIHdoZW4gZ2V0dGluZyB0aGUgY29uZmlnXCIpO1xuICAgICAgY29uc3QgZ2V0dGVyOiAoZW52OiBhbnkpID0+IGFueSA9IGplc3QuZm4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShleGNlcHRpb24pO1xuICAgICAgcmV0dXJuIGV4cGVjdChmcm9tRW52KGdldHRlcikoKSkucmVqZWN0cy50b0VxdWFsKGV4Y2VwdGlvbik7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=