import { ProviderError } from "@aws-sdk/property-provider";
import { fromEnv } from "./fromEnv";
describe("fromEnv", function () {
    describe("with env var getter", function () {
        var envVarName = "ENV_VAR_NAME";
        var envVarGetter = function (env) { return env[envVarName]; };
        var envVarValue = process.env[envVarName];
        var mockEnvVarValue = "mockEnvVarValue";
        var getProviderError = function (getter) {
            return new ProviderError("Cannot load config from environment variables with getter: " + getter);
        };
        beforeEach(function () {
            delete process.env[envVarName];
        });
        afterAll(function () {
            process.env[envVarName] = envVarValue;
        });
        it("returns string value in '" + envVarName + "' env var when set", function () {
            process.env[envVarName] = mockEnvVarValue;
            return expect(fromEnv(envVarGetter)()).resolves.toBe(mockEnvVarValue);
        });
        it("return complex value from the getter", function () {
            var value = { Foo: "bar" };
            var getter = jest.fn().mockReturnValue(value);
            // Validate the generic type works
            return expect(fromEnv(getter)()).resolves.toEqual(value);
        });
        it("throws when '" + envVarName + "' env var is not set", function () {
            expect.assertions(1);
            return expect(fromEnv(envVarGetter)()).rejects.toMatchObject(getProviderError(envVarGetter));
        });
        it("throws when the getter function throws", function () {
            var exception = new Error("Exception when getting the config");
            var getter = jest.fn().mockRejectedValue(exception);
            return expect(fromEnv(getter)()).rejects.toEqual(exception);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUVudi5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Zyb21FbnYuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFM0QsT0FBTyxFQUFFLE9BQU8sRUFBaUIsTUFBTSxXQUFXLENBQUM7QUFFbkQsUUFBUSxDQUFDLFNBQVMsRUFBRTtJQUNsQixRQUFRLENBQUMscUJBQXFCLEVBQUU7UUFDOUIsSUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDO1FBQ2xDLElBQU0sWUFBWSxHQUEwQixVQUFDLEdBQXNCLElBQUssT0FBQSxHQUFHLENBQUMsVUFBVSxDQUFFLEVBQWhCLENBQWdCLENBQUM7UUFDekYsSUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM1QyxJQUFNLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQztRQUUxQyxJQUFNLGdCQUFnQixHQUFHLFVBQUMsTUFBNkI7WUFDckQsT0FBQSxJQUFJLGFBQWEsQ0FBQyxnRUFBOEQsTUFBUSxDQUFDO1FBQXpGLENBQXlGLENBQUM7UUFFNUYsVUFBVSxDQUFDO1lBQ1QsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxXQUFXLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOEJBQTRCLFVBQVUsdUJBQW9CLEVBQUU7WUFDN0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxlQUFlLENBQUM7WUFDMUMsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3hFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNDQUFzQyxFQUFFO1lBRXpDLElBQU0sS0FBSyxHQUFVLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ3BDLElBQU0sTUFBTSxHQUF3QixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3JFLGtDQUFrQztZQUNsQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsa0JBQWdCLFVBQVUseUJBQXNCLEVBQUU7WUFDbkQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztRQUMvRixDQUFDLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyx3Q0FBd0MsRUFBRTtZQUMzQyxJQUFNLFNBQVMsR0FBRyxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO1lBQ2pFLElBQU0sTUFBTSxHQUFzQixJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDekUsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyRXJyb3IgfSBmcm9tIFwiQGF3cy1zZGsvcHJvcGVydHktcHJvdmlkZXJcIjtcblxuaW1wb3J0IHsgZnJvbUVudiwgR2V0dGVyRnJvbUVudiB9IGZyb20gXCIuL2Zyb21FbnZcIjtcblxuZGVzY3JpYmUoXCJmcm9tRW52XCIsICgpID0+IHtcbiAgZGVzY3JpYmUoXCJ3aXRoIGVudiB2YXIgZ2V0dGVyXCIsICgpID0+IHtcbiAgICBjb25zdCBlbnZWYXJOYW1lID0gXCJFTlZfVkFSX05BTUVcIjtcbiAgICBjb25zdCBlbnZWYXJHZXR0ZXI6IEdldHRlckZyb21FbnY8c3RyaW5nPiA9IChlbnY6IE5vZGVKUy5Qcm9jZXNzRW52KSA9PiBlbnZbZW52VmFyTmFtZV0hO1xuICAgIGNvbnN0IGVudlZhclZhbHVlID0gcHJvY2Vzcy5lbnZbZW52VmFyTmFtZV07XG4gICAgY29uc3QgbW9ja0VudlZhclZhbHVlID0gXCJtb2NrRW52VmFyVmFsdWVcIjtcblxuICAgIGNvbnN0IGdldFByb3ZpZGVyRXJyb3IgPSAoZ2V0dGVyOiBHZXR0ZXJGcm9tRW52PHN0cmluZz4pID0+XG4gICAgICBuZXcgUHJvdmlkZXJFcnJvcihgQ2Fubm90IGxvYWQgY29uZmlnIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzIHdpdGggZ2V0dGVyOiAke2dldHRlcn1gKTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZGVsZXRlIHByb2Nlc3MuZW52W2VudlZhck5hbWVdO1xuICAgIH0pO1xuXG4gICAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgICAgcHJvY2Vzcy5lbnZbZW52VmFyTmFtZV0gPSBlbnZWYXJWYWx1ZTtcbiAgICB9KTtcblxuICAgIGl0KGByZXR1cm5zIHN0cmluZyB2YWx1ZSBpbiAnJHtlbnZWYXJOYW1lfScgZW52IHZhciB3aGVuIHNldGAsICgpID0+IHtcbiAgICAgIHByb2Nlc3MuZW52W2VudlZhck5hbWVdID0gbW9ja0VudlZhclZhbHVlO1xuICAgICAgcmV0dXJuIGV4cGVjdChmcm9tRW52KGVudlZhckdldHRlcikoKSkucmVzb2x2ZXMudG9CZShtb2NrRW52VmFyVmFsdWUpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJyZXR1cm4gY29tcGxleCB2YWx1ZSBmcm9tIHRoZSBnZXR0ZXJcIiwgKCkgPT4ge1xuICAgICAgdHlwZSBWYWx1ZSA9IHsgRm9vOiBzdHJpbmcgfTtcbiAgICAgIGNvbnN0IHZhbHVlOiBWYWx1ZSA9IHsgRm9vOiBcImJhclwiIH07XG4gICAgICBjb25zdCBnZXR0ZXI6IChlbnY6IGFueSkgPT4gVmFsdWUgPSBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHZhbHVlKTtcbiAgICAgIC8vIFZhbGlkYXRlIHRoZSBnZW5lcmljIHR5cGUgd29ya3NcbiAgICAgIHJldHVybiBleHBlY3QoZnJvbUVudihnZXR0ZXIpKCkpLnJlc29sdmVzLnRvRXF1YWwodmFsdWUpO1xuICAgIH0pO1xuXG4gICAgaXQoYHRocm93cyB3aGVuICcke2VudlZhck5hbWV9JyBlbnYgdmFyIGlzIG5vdCBzZXRgLCAoKSA9PiB7XG4gICAgICBleHBlY3QuYXNzZXJ0aW9ucygxKTtcbiAgICAgIHJldHVybiBleHBlY3QoZnJvbUVudihlbnZWYXJHZXR0ZXIpKCkpLnJlamVjdHMudG9NYXRjaE9iamVjdChnZXRQcm92aWRlckVycm9yKGVudlZhckdldHRlcikpO1xuICAgIH0pO1xuXG4gICAgaXQoXCJ0aHJvd3Mgd2hlbiB0aGUgZ2V0dGVyIGZ1bmN0aW9uIHRocm93c1wiLCAoKSA9PiB7XG4gICAgICBjb25zdCBleGNlcHRpb24gPSBuZXcgRXJyb3IoXCJFeGNlcHRpb24gd2hlbiBnZXR0aW5nIHRoZSBjb25maWdcIik7XG4gICAgICBjb25zdCBnZXR0ZXI6IChlbnY6IGFueSkgPT4gYW55ID0gamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKGV4Y2VwdGlvbik7XG4gICAgICByZXR1cm4gZXhwZWN0KGZyb21FbnYoZ2V0dGVyKSgpKS5yZWplY3RzLnRvRXF1YWwoZXhjZXB0aW9uKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==