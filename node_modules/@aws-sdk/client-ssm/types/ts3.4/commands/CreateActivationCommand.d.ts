import { SSMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../SSMClient";
import { CreateActivationRequest, CreateActivationResult } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type CreateActivationCommandInput = CreateActivationRequest;
export declare type CreateActivationCommandOutput = CreateActivationResult & __MetadataBearer;
/**
 * <p>Generates an activation code and activation ID you can use to register your on-premises
 *    server or virtual machine (VM) with Systems Manager. Registering these machines with Systems Manager makes it
 *    possible to manage them using Systems Manager capabilities. You use the activation code and ID when
 *    installing SSM Agent on machines in your hybrid environment. For more information about
 *    requirements for managing on-premises instances and VMs using Systems Manager, see <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-managedinstances.html">Setting up
 *     AWS Systems Manager for hybrid environments</a> in the <i>AWS Systems Manager User Guide</i>. </p>
 *          <note>
 *             <p>On-premises servers or VMs that are registered with Systems Manager and EC2 instances that you manage
 *     with Systems Manager are all called <i>managed instances</i>.</p>
 *          </note>
 */
export declare class CreateActivationCommand extends $Command<CreateActivationCommandInput, CreateActivationCommandOutput, SSMClientResolvedConfig> {
    readonly input: CreateActivationCommandInput;
    constructor(input: CreateActivationCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CreateActivationCommandInput, CreateActivationCommandOutput>;
    private serialize;
    private deserialize;
}
