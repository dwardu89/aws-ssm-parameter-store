import { SSMClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../SSMClient";
import { ResetServiceSettingRequest, ResetServiceSettingResult } from "../models/models_1";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type ResetServiceSettingCommandInput = ResetServiceSettingRequest;
export declare type ResetServiceSettingCommandOutput = ResetServiceSettingResult & __MetadataBearer;
/**
 * <p>
 *             <code>ServiceSetting</code> is an account-level setting for an AWS service. This setting
 *    defines how a user interacts with or uses a service or a feature of a service. For example, if an
 *    AWS service charges money to the account based on feature or service usage, then the AWS service
 *    team might create a default setting of "false". This means the user can't use this feature unless
 *    they change the setting to "true" and intentionally opt in for a paid feature.</p>
 *          <p>Services map a <code>SettingId</code> object to a setting value. AWS services teams define
 *    the default value for a <code>SettingId</code>. You can't create a new <code>SettingId</code>,
 *    but you can overwrite the default value if you have the <code>ssm:UpdateServiceSetting</code>
 *    permission for the setting. Use the <a>GetServiceSetting</a> API action to view the
 *    current value. Use the <a>UpdateServiceSetting</a> API action to change the default
 *    setting. </p>
 *
 *          <p>Reset the service setting for the account to the default value as provisioned by the AWS
 *    service team. </p>
 */
export declare class ResetServiceSettingCommand extends $Command<ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput, SSMClientResolvedConfig> {
    readonly input: ResetServiceSettingCommandInput;
    constructor(input: ResetServiceSettingCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: SSMClientResolvedConfig, options?: __HttpHandlerOptions): Handler<ResetServiceSettingCommandInput, ResetServiceSettingCommandOutput>;
    private serialize;
    private deserialize;
}
