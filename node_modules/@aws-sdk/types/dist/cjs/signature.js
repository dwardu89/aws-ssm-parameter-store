"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NpZ25hdHVyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiLi9odHRwXCI7XG5cbi8qKlxuICogQSB7RGF0ZX0gb2JqZWN0LCBhIHVuaXggKGVwb2NoKSB0aW1lc3RhbXAgaW4gc2Vjb25kcywgb3IgYSBzdHJpbmcgdGhhdCBjYW4gYmVcbiAqIHVuZGVyc3Rvb2QgYnkgdGhlIEphdmFTY3JpcHQge0RhdGV9IGNvbnN0cnVjdG9yLlxuICovXG5leHBvcnQgdHlwZSBEYXRlSW5wdXQgPSBudW1iZXIgfCBzdHJpbmcgfCBEYXRlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNpZ25pbmdBcmd1bWVudHMge1xuICAvKipcbiAgICogVGhlIGRhdGUgYW5kIHRpbWUgdG8gYmUgdXNlZCBhcyBzaWduYXR1cmUgbWV0YWRhdGEuIFRoaXMgdmFsdWUgc2hvdWxkIGJlXG4gICAqIGEgRGF0ZSBvYmplY3QsIGEgdW5peCAoZXBvY2gpIHRpbWVzdGFtcCwgb3IgYSBzdHJpbmcgdGhhdCBjYW4gYmVcbiAgICogdW5kZXJzdG9vZCBieSB0aGUgSmF2YVNjcmlwdCBgRGF0ZWAgY29uc3RydWN0b3IuSWYgbm90IHN1cHBsaWVkLCB0aGVcbiAgICogdmFsdWUgcmV0dXJuZWQgYnkgYG5ldyBEYXRlKClgIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHNpZ25pbmdEYXRlPzogRGF0ZUlucHV0O1xuXG4gIC8qKlxuICAgKiBUaGUgc2VydmljZSBzaWduaW5nIG5hbWUuIEl0IHdpbGwgb3ZlcnJpZGUgdGhlIHNlcnZpY2UgbmFtZSBvZiB0aGUgc2lnbmVyXG4gICAqIGluIGN1cnJlbnQgaW52b2NhdGlvblxuICAgKi9cbiAgc2lnbmluZ1NlcnZpY2U/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSByZWdpb24gbmFtZSB0byBzaWduIHRoZSByZXF1ZXN0LiBJdCB3aWxsIG92ZXJyaWRlIHRoZSBzaWduaW5nIHJlZ2lvbiBvZiB0aGVcbiAgICogc2lnbmVyIGluIGN1cnJlbnQgaW52b2NhdGlvblxuICAgKi9cbiAgc2lnbmluZ1JlZ2lvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyBleHRlbmRzIFNpZ25pbmdBcmd1bWVudHMge1xuICAvKipcbiAgICogQSBzZXQgb2Ygc3RyaW5ncyB3aG9zZSBtZW1iZXJzIHJlcHJlc2VudHMgaGVhZGVycyB0aGF0IGNhbm5vdCBiZSBzaWduZWQuXG4gICAqIEFsbCBoZWFkZXJzIGluIHRoZSBwcm92aWRlZCByZXF1ZXN0IHdpbGwgaGF2ZSB0aGVpciBuYW1lcyBjb252ZXJ0ZWQgdG9cbiAgICogbG93ZXIgY2FzZSBhbmQgdGhlbiBjaGVja2VkIGZvciBleGlzdGVuY2UgaW4gdGhlIHVuc2lnbmFibGVIZWFkZXJzIHNldC5cbiAgICovXG4gIHVuc2lnbmFibGVIZWFkZXJzPzogU2V0PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIHN0cmluZ3Mgd2hvc2UgbWVtYmVycyByZXByZXNlbnRzIGhlYWRlcnMgdGhhdCBzaG91bGQgYmUgc2lnbmVkLlxuICAgKiBBbnkgdmFsdWVzIHBhc3NlZCBoZXJlIHdpbGwgb3ZlcnJpZGUgdGhvc2UgcHJvdmlkZWQgdmlhIHVuc2lnbmFibGVIZWFkZXJzLFxuICAgKiBhbGxvd2luZyB0aGVtIHRvIGJlIHNpZ25lZC5cbiAgICpcbiAgICogQWxsIGhlYWRlcnMgaW4gdGhlIHByb3ZpZGVkIHJlcXVlc3Qgd2lsbCBoYXZlIHRoZWlyIG5hbWVzIGNvbnZlcnRlZCB0b1xuICAgKiBsb3dlciBjYXNlIGJlZm9yZSBzaWduaW5nLlxuICAgKi9cbiAgc2lnbmFibGVIZWFkZXJzPzogU2V0PHN0cmluZz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMgZXh0ZW5kcyBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgYmVmb3JlIHRoZSBwcmVzaWduZWQgVVJMIGV4cGlyZXNcbiAgICovXG4gIGV4cGlyZXNJbj86IG51bWJlcjtcblxuICAvKipcbiAgICogQSBzZXQgb2Ygc3RyaW5ncyB3aG9zZSByZXByZXNlbnRpbmcgaGVhZGVycyB0aGF0IHNob3VsZCBub3QgYmUgaG9pc3RlZFxuICAgKiB0byBwcmVzaWduZWQgcmVxdWVzdCdzIHF1ZXJ5IHN0cmluZy4gSWYgbm90IHN1cHBsaWVkLCB0aGUgcHJlc2lnbmVyXG4gICAqIG1vdmVzIGFsbCB0aGUgQVdTLXNwZWNpZmljIGhlYWRlcnMgKHN0YXJ0aW5nIHdpdGggYHgtYW16LWApIHRvIHRoZSByZXF1ZXN0XG4gICAqIHF1ZXJ5IHN0cmluZy4gSWYgc3VwcGxpZWQsIHRoZXNlIGhlYWRlcnMgcmVtYWluIGluIHRoZSBwcmVzaWduZWQgcmVxdWVzdCdzXG4gICAqIGhlYWRlci5cbiAgICogQWxsIGhlYWRlcnMgaW4gdGhlIHByb3ZpZGVkIHJlcXVlc3Qgd2lsbCBoYXZlIHRoZWlyIG5hbWVzIGNvbnZlcnRlZCB0b1xuICAgKiBsb3dlciBjYXNlIGFuZCB0aGVuIGNoZWNrZWQgZm9yIGV4aXN0ZW5jZSBpbiB0aGUgdW5ob2lzdGFibGVIZWFkZXJzIHNldC5cbiAgICovXG4gIHVuaG9pc3RhYmxlSGVhZGVycz86IFNldDxzdHJpbmc+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U2lnbmluZ0FyZ3VtZW50cyBleHRlbmRzIFNpZ25pbmdBcmd1bWVudHMge1xuICBwcmlvclNpZ25hdHVyZTogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RQcmVzaWduZXIge1xuICAvKipcbiAgICogU2lnbnMgYSByZXF1ZXN0IGZvciBmdXR1cmUgdXNlLlxuICAgKlxuICAgKiBUaGUgcmVxdWVzdCB3aWxsIGJlIHZhbGlkIHVudGlsIGVpdGhlciB0aGUgcHJvdmlkZWQgYGV4cGlyYXRpb25gIHRpbWUgaGFzXG4gICAqIHBhc3NlZCBvciB0aGUgdW5kZXJseWluZyBjcmVkZW50aWFscyBoYXZlIGV4cGlyZWQuXG4gICAqXG4gICAqIEBwYXJhbSByZXF1ZXN0VG9TaWduIFRoZSByZXF1ZXN0IHRoYXQgc2hvdWxkIGJlIHNpZ25lZC5cbiAgICogQHBhcmFtIG9wdGlvbnMgICAgICAgQWRkaXRpb25hbCBzaWduaW5nIG9wdGlvbnMuXG4gICAqL1xuICBwcmVzaWduKHJlcXVlc3RUb1NpZ246IEh0dHBSZXF1ZXN0LCBvcHRpb25zPzogUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMpOiBQcm9taXNlPEh0dHBSZXF1ZXN0Pjtcbn1cblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBzaWducyByZXF1ZXN0IG9iamVjdHMgd2l0aCBBV1MgY3JlZGVudGlhbHMgdXNpbmcgb25lIG9mIHRoZVxuICogQVdTIGF1dGhlbnRpY2F0aW9uIHByb3RvY29scy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXF1ZXN0U2lnbmVyIHtcbiAgLyoqXG4gICAqIFNpZ24gdGhlIHByb3ZpZGVkIHJlcXVlc3QgZm9yIGltbWVkaWF0ZSBkaXNwYXRjaC5cbiAgICovXG4gIHNpZ24ocmVxdWVzdFRvU2lnbjogSHR0cFJlcXVlc3QsIG9wdGlvbnM/OiBSZXF1ZXN0U2lnbmluZ0FyZ3VtZW50cyk6IFByb21pc2U8SHR0cFJlcXVlc3Q+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmluZ1NpZ25lciB7XG4gIC8qKlxuICAgKiBTaWduIHRoZSBwcm92aWRlZCBgc3RyaW5nVG9TaWduYCBmb3IgdXNlIG91dHNpZGUgb2YgdGhlIGNvbnRleHQgb2ZcbiAgICogcmVxdWVzdCBzaWduaW5nLiBUeXBpY2FsIHVzZXMgaW5jbHVkZSBzaWduZWQgcG9saWN5IGdlbmVyYXRpb24uXG4gICAqL1xuICBzaWduKHN0cmluZ1RvU2lnbjogc3RyaW5nLCBvcHRpb25zPzogU2lnbmluZ0FyZ3VtZW50cyk6IFByb21pc2U8c3RyaW5nPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb3JtYXR0ZWRFdmVudCB7XG4gIGhlYWRlcnM6IFVpbnQ4QXJyYXk7XG4gIHBheWxvYWQ6IFVpbnQ4QXJyYXk7XG59XG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U2lnbmVyIHtcbiAgLyoqXG4gICAqIFNpZ24gdGhlIGluZGl2aWR1YWwgZXZlbnQgb2YgdGhlIGV2ZW50IHN0cmVhbS5cbiAgICovXG4gIHNpZ24oZXZlbnQ6IEZvcm1hdHRlZEV2ZW50LCBvcHRpb25zOiBFdmVudFNpZ25pbmdBcmd1bWVudHMpOiBQcm9taXNlPHN0cmluZz47XG59XG4iXX0=